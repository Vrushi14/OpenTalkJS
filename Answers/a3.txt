Here are some examples of code documentation and API documentation:

**Code Documentation**

*   **Python Example**
    ```python
def add(a, b):
    """
    Returns the sum of two numbers.

    Args:
        a (int): The first number.
        b (int): The second number.

    Returns:
        int: The sum of a and b.
    """
    return a + b

# Example usage:
print(add(2, 3))  # Output: 5
```

*   **JavaScript Example**
    ```javascript
/**
 * Adds two numbers together.
 *
 * @param {number} a - The first number to add.
 * @param {number} b - The second number to add.
 * @returns {number} The sum of a and b.
 */
function add(a, b) {
    return a + b;
}

// Example usage:
console.log(add(2, 3));  // Output: 5
```

**API Documentation**

*   **RESTful API Example**
    ```http
# POST /users
{
    "name": "John Doe",
    "email": "john.doe@example.com"
}

# GET /users/:id
{
    "id": 1,
    "name": "Jane Doe",
    "email": "jane.doe@example.com"
}
```

*   **GraphQL API Example**
    ```graphql
query {
    user(id: 1) {
        name
        email
    }
}

mutation {
    createUser(name: "Bob Smith", email: "bob.smith@example.com") {
        id
        name
        email
    }
}
```

*   **API Documentation for a User Service**
    ```markdown
# Users API

## Endpoints

### GET /users
Returns a list of all users.

**Response**

```json
[
    {
        "id": 1,
        "name": "John Doe",
        "email": "john.doe@example.com"
    },
    {
        "id": 2,
        "name": "Jane Doe",
        "email": "jane.doe@example.com"
    }
]
```

### GET /users/:id
Returns a single user by ID.

**Response**

```json
{
    "id": 1,
    "name": "John Doe",
    "email": "john.doe@example.com"
}
```

### POST /users
Creates a new user.

**Request Body**

```json
{
    "name": "Bob Smith",
    "email": "bob.smith@example.com"
}
```

### PUT /users/:id
Updates an existing user.

**Request Body**

```json
{
    "name": "John Doe Updated",
    "email": "john.doe.updated@example.com"
}
```

### DELETE /users/:id
Deletes a user by ID.

**Response**

None

## Authentication

*   **Basic Auth**: Requires `Authorization` header with `Basic <base64 encoded credentials>`.
*   **Bearer Token**: Requires `Authorization` header with `Bearer <token>`.
```